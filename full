from pathlib import Path
from zipfile import ZipFile

base = Path("/mnt/data")

# Helper to write a file
def w(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")

# -------------- Create WEB zip --------------
web_root = base / "afrikoin-web"
w(web_root / "package.json", """{
  "name": "afrikoin-web",
  "version": "1.0.0",
  "private": true,
  "scripts": { "dev": "vite", "build": "vite build", "preview": "vite preview" },
  "dependencies": { "react": "^18.2.0", "react-dom": "^18.2.0" },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.0",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "sass": "^1.77.0",
    "tailwindcss": "^3.4.7",
    "typescript": "^5.4.5",
    "vite": "^5.2.0"
  }
}""")
w(web_root / "vite.config.ts", """import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'
export default defineConfig({
  plugins: [react()],
  resolve: { alias: { '@': path.resolve(__dirname, 'src') } },
  server: { port: 3000, open: true },
})""")
w(web_root / "index.html", """<!doctype html><html lang="fr"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width, initial-scale=1.0"/><title>AfriKoin</title></head><body><div id="root"></div><script type="module" src="/src/main.tsx"></script></body></html>""")
w(web_root / "postcss.config.js", "module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } }")
w(web_root / "tailwind.config.js", "module.exports = { content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'], theme: { extend: {} }, plugins: [] }")
w(web_root / "tsconfig.json", """{
  "compilerOptions": { "target":"ESNext","useDefineForClassFields":true,"module":"ESNext","moduleResolution":"Node","strict":true,"jsx":"react-jsx","baseUrl":".","paths":{"@/*":["src/*"]} },
  "include":["src"]
}""")
w(web_root / "vercel.json", """{ "version": 2, "rewrites": [{ "source": "/(.*)", "destination": "/" }] }""")
w(web_root / "src/main.tsx", """import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './styles/global.scss'
ReactDOM.createRoot(document.getElementById('root')!).render(<React.StrictMode><App/></React.StrictMode>)""")
w(web_root / "src/App.tsx", """export default function App(){return(<div className="p-10 text-center"><h1 className="text-3xl font-bold">AfriKoin üåç</h1><p className="mt-2">Vercel ready ‚Äì www.afrikoin.online</p></div>)}""")
w(web_root / "src/styles/global.scss", "@tailwind base;\n@tailwind components;\n@tailwind utilities;")

web_zip = base / "afrikoin-web.zip"
with ZipFile(web_zip, "w") as z:
    for f in web_root.rglob("*"):
        if f.is_file():
            z.write(f, arcname=str(f.relative_to(web_root)))

# -------------- Create MOBILE zip --------------
mob_root = base / "afrikoin-mobile"
w(mob_root / "gradle.properties", "org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\nandroid.useAndroidX=true\nkotlin.code.style=official\nandroid.nonTransitiveRClass=true\n")
w(mob_root / "settings.gradle.kts", "rootProject.name = \"AfriKoin\"\ninclude(\":app\")\n")
w(mob_root / "build.gradle.kts", "plugins { id(\"com.android.application\") version \"8.5.0\" apply false; id(\"org.jetbrains.kotlin.android\") version \"1.9.24\" apply false }")
w(mob_root / "app/build.gradle.kts", """plugins { id("com.android.application"); id("org.jetbrains.kotlin.android") }
android {
  namespace = "com.afrikoin.afrikoin"
  compileSdk = 34
  defaultConfig { applicationId = "com.afrikoin.afrikoin"; minSdk = 29; targetSdk = 34; versionCode = 3; versionName = "1.2.2"; testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner" }
  signingConfigs { create("release"){ storeFile = file("../../.github/keystore/afrikoin-release-key.jks"); storePassword = System.getenv("STORE_PASSWORD") ?: "afrikoin123"; keyAlias = System.getenv("KEY_ALIAS") ?: "afrikoin"; keyPassword = System.getenv("KEY_PASSWORD") ?: "afrikoin123"; } }
  buildTypes {
    getByName("release"){ isMinifyEnabled = false; isShrinkResources = false; proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"); signingConfig = signingConfigs.getByName("release") }
    getByName("debug"){ signingConfig = signingConfigs.getByName("release") }
  }
  compileOptions { sourceCompatibility = JavaVersion.VERSION_17; targetCompatibility = JavaVersion.VERSION_17 }
  kotlinOptions { jvmTarget = "17" }
  buildFeatures { viewBinding = true }
}
dependencies {
  implementation("androidx.core:core-ktx:1.12.0")
  implementation("androidx.appcompat:appcompat:1.6.1")
  implementation("com.google.android.material:material:1.11.0")
  implementation("androidx.constraintlayout:constraintlayout:2.1.4")
  testImplementation("junit:junit:4.13.2")
  androidTestImplementation("androidx.test.ext:junit:1.1.5")
  androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
}
""")
w(mob_root / "app/proguard-rules.pro", "-keep class * { *; }\n-dontwarn **\n")
w(mob_root / "app/src/main/AndroidManifest.xml", """<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.afrikoin.afrikoin">
  <application android:label="AfriKoin" android:icon="@mipmap/ic_launcher" android:theme="@style/Theme.Material3.DayNight.NoActionBar">
    <activity android:name=".MainActivity" android:exported="true">
      <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
      </intent-filter>
    </activity>
  </application>
</manifest>""")

mob_zip = base / "afrikoin-mobile.zip"
with ZipFile(mob_zip, "w") as z:
    for f in mob_root.rglob("*"):
        if f.is_file():
            z.write(f, arcname=str(f.relative_to(mob_root)))

# -------------- Create FULL zip --------------
full_root = base / "afrikoin-full-new"
# Reuse generated trees
# web/
for f in web_root.rglob("*"):
    if f.is_file():
        rel = Path("web") / f.relative_to(web_root)
        (full_root / rel).parent.mkdir(parents=True, exist_ok=True)
        (full_root / rel).write_text(f.read_text(encoding="utf-8"), encoding="utf-8")
# mobile/
for f in mob_root.rglob("*"):
    if f.is_file():
        rel = Path("mobile") / f.relative_to(mob_root)
        (full_root / rel).parent.mkdir(parents=True, exist_ok=True)
        (full_root / rel).write_text(f.read_text(encoding="utf-8"), encoding="utf-8")

# backend placeholder
w(full_root / "backend/README.md", "# Backend placeholder\nSupabase/Express √† configurer.\n")

# workflows
w(full_root / ".github/workflows/android-build.yml", """name: Android AAB Build (release 1.2.2)
on: { push: { branches: [ main ], paths: ["mobile/**",".github/workflows/android-build.yml"] }, workflow_dispatch: {} }
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "17" }
      - name: Prepare keystore
        run: |
          mkdir -p .github/keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > .github/keystore/afrikoin-release-key.jks
      - name: Build AAB (release)
        working-directory: mobile
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew clean bundleRelease || ./gradlew wrapper && ./gradlew clean bundleRelease
      - uses: actions/upload-artifact@v4
        with: { name: afrikoin-aab-1.2.2, path: mobile/app/build/outputs/bundle/release/*.aab }
""")
w(full_root / ".github/workflows/web-deploy.yml", """name: Web Deploy (Vercel)
on: { push: { branches: [ main ], paths: ["web/**",".github/workflows/web-deploy.yml"] }, workflow_dispatch: {} }
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: web } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - run: npm ci || npm i
      - run: npm run build
      - run: npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
""")
w(full_root / "README.md", "# AfriKoin full\nMobile (Android) + Web (Vite/React) + CI/CD ready.\n")

full_zip = base / "afrikoin-full-new.zip"
with ZipFile(full_zip, "w") as z:
    for f in full_root.rglob("*"):
        if f.is_file():
            z.write(f, arcname=str(f.relative_to(full_root)))

str(web_zip), str(mob_zip), str(full_zip)
